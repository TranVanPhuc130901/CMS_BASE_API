// <auto-generated />
using System;
using CMS_Common.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CMS_BASE_API.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20230508024849_createdb")]
    partial class createdb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CMS_Common.Account", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<DateTime>("CreateToken")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedRefreshToken")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("ExpiresRefreshToken")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresToken")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Modifined")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSaft")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserID");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("CMS_Common.Article", b =>
                {
                    b.Property<int>("ArticleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticleID"));

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(700)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ArticleID");

                    b.ToTable("Artticle", (string)null);
                });

            modelBuilder.Entity("CMS_Common.ArticleCategoryArticle", b =>
                {
                    b.Property<int>("ArticleID")
                        .HasColumnType("int");

                    b.Property<int>("CategoryArticleID")
                        .HasColumnType("int");

                    b.HasKey("ArticleID", "CategoryArticleID");

                    b.HasIndex("CategoryArticleID");

                    b.ToTable("ArticleCategoryArticle", (string)null);
                });

            modelBuilder.Entity("CMS_Common.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("CategoryName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CategoryID");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("CMS_Common.CategoryArticle", b =>
                {
                    b.Property<int>("CategoryActicleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryActicleID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("CategoryActicleID");

                    b.ToTable("CategoryArticle", (string)null);
                });

            modelBuilder.Entity("CMS_Common.Comment", b =>
                {
                    b.Property<int>("ArticleID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("CommentID")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ArticleID", "UserID", "CommentID");

                    b.HasIndex("UserID");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("CMS_Common.Permission", b =>
                {
                    b.Property<int>("PermissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionID"));

                    b.Property<string>("PermissionDesc")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PermissionsName")
                        .HasColumnType("varchar(100)");

                    b.HasKey("PermissionID");

                    b.ToTable("Permission", (string)null);
                });

            modelBuilder.Entity("CMS_Common.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductID"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<DateTime>("ModifinedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProductDescription")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProductName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ProductStatus")
                        .HasColumnType("int");

                    b.HasKey("ProductID");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("CMS_Common.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.HasKey("ProductCategoryID", "ProductID", "CategoryID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductCategory", (string)null);
                });

            modelBuilder.Entity("CMS_Common.ProductContent", b =>
                {
                    b.Property<int>("ProductContentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductContentID"));

                    b.Property<string>("ProductContentName")
                        .HasColumnType("varchar(MAX)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("ProductContentID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductContent", (string)null);
                });

            modelBuilder.Entity("CMS_Common.ProductImage", b =>
                {
                    b.Property<int>("ProductImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductImageID"));

                    b.Property<int>("IsDefault")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("ProductImageSlug")
                        .HasColumnType("varchar(MAX)");

                    b.HasKey("ProductImageID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductImage", (string)null);
                });

            modelBuilder.Entity("CMS_Common.ProductMetaData", b =>
                {
                    b.Property<int>("ProductMetaDataID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductMetaDataID"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("ProductMetaDataTitle")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProductMetadataDescrition")
                        .HasColumnType("varchar(MAX)");

                    b.HasKey("ProductMetaDataID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductMetaData", (string)null);
                });

            modelBuilder.Entity("CMS_Common.ProductPrice", b =>
                {
                    b.Property<int>("ProductPriceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductPriceID"));

                    b.Property<decimal>("ProductCost")
                        .HasColumnType("Decimal(18,4)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<decimal>("ProductPromotional")
                        .HasColumnType("Decimal(18,4)");

                    b.HasKey("ProductPriceID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductPrice", (string)null);
                });

            modelBuilder.Entity("CMS_Common.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"));

                    b.Property<string>("RoleDescription")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("RoleName")
                        .HasColumnType("varchar(255)");

                    b.HasKey("RoleID");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("CMS_Common.RolePermission", b =>
                {
                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<int>("PermissionID")
                        .HasColumnType("int");

                    b.HasKey("RoleID", "PermissionID");

                    b.HasIndex("PermissionID");

                    b.ToTable("RolePermission", (string)null);
                });

            modelBuilder.Entity("CMS_Common.Tag", b =>
                {
                    b.Property<int>("TagID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagID"));

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("TagID");

                    b.ToTable("Tag", (string)null);
                });

            modelBuilder.Entity("CMS_Common.TagArticle", b =>
                {
                    b.Property<int>("ArticleID")
                        .HasColumnType("int");

                    b.Property<int>("TagID")
                        .HasColumnType("int");

                    b.HasKey("ArticleID", "TagID");

                    b.HasIndex("TagID");

                    b.ToTable("TagArticle", (string)null);
                });

            modelBuilder.Entity("CMS_Common.UserRole", b =>
                {
                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("RoleID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("CMS_Common.ArticleCategoryArticle", b =>
                {
                    b.HasOne("CMS_Common.Article", "Articles")
                        .WithMany("ArticleCategoryArticles")
                        .HasForeignKey("ArticleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fk_ArtilceCategoryArticle_Article");

                    b.HasOne("CMS_Common.CategoryArticle", "CategoryArticles")
                        .WithMany("ArticleCategoryArticles")
                        .HasForeignKey("CategoryArticleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fk_ArticleCategoryArticle_CategoryArticle");

                    b.Navigation("Articles");

                    b.Navigation("CategoryArticles");
                });

            modelBuilder.Entity("CMS_Common.Comment", b =>
                {
                    b.HasOne("CMS_Common.Article", "Articles")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Comment_Article");

                    b.HasOne("CMS_Common.Account", "Accounts")
                        .WithMany("Comments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Comment_Account");

                    b.Navigation("Accounts");

                    b.Navigation("Articles");
                });

            modelBuilder.Entity("CMS_Common.ProductCategory", b =>
                {
                    b.HasOne("CMS_Common.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fk_ProductCategory_Category");

                    b.HasOne("CMS_Common.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fk_ProductCategory_Product");

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CMS_Common.ProductContent", b =>
                {
                    b.HasOne("CMS_Common.Product", "Product")
                        .WithMany("ProductContents")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fk_ProductContent_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CMS_Common.ProductImage", b =>
                {
                    b.HasOne("CMS_Common.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fk_ProductImage_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CMS_Common.ProductMetaData", b =>
                {
                    b.HasOne("CMS_Common.Product", "Product")
                        .WithMany("ProductMetaDatas")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fk_ProductMetaData_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CMS_Common.ProductPrice", b =>
                {
                    b.HasOne("CMS_Common.Product", "Product")
                        .WithMany("ProductPrices")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fk_ProductPrice_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CMS_Common.RolePermission", b =>
                {
                    b.HasOne("CMS_Common.Permission", "Permission")
                        .WithMany("RolePermission")
                        .HasForeignKey("PermissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RolePermission_Permission");

                    b.HasOne("CMS_Common.Role", "Role")
                        .WithMany("RolePermission")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RolePermission_Role");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CMS_Common.TagArticle", b =>
                {
                    b.HasOne("CMS_Common.Article", "Articles")
                        .WithMany("TagArticles")
                        .HasForeignKey("ArticleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fk_TagArticle_Article");

                    b.HasOne("CMS_Common.Tag", "Tags")
                        .WithMany("TagArticles")
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TagArticle_Tag");

                    b.Navigation("Articles");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("CMS_Common.UserRole", b =>
                {
                    b.HasOne("CMS_Common.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserRole_Role");

                    b.HasOne("CMS_Common.Account", "User")
                        .WithMany("userRoles")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserRole_User");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CMS_Common.Account", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("userRoles");
                });

            modelBuilder.Entity("CMS_Common.Article", b =>
                {
                    b.Navigation("ArticleCategoryArticles");

                    b.Navigation("Comments");

                    b.Navigation("TagArticles");
                });

            modelBuilder.Entity("CMS_Common.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("CMS_Common.CategoryArticle", b =>
                {
                    b.Navigation("ArticleCategoryArticles");
                });

            modelBuilder.Entity("CMS_Common.Permission", b =>
                {
                    b.Navigation("RolePermission");
                });

            modelBuilder.Entity("CMS_Common.Product", b =>
                {
                    b.Navigation("ProductCategories");

                    b.Navigation("ProductContents");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductMetaDatas");

                    b.Navigation("ProductPrices");
                });

            modelBuilder.Entity("CMS_Common.Role", b =>
                {
                    b.Navigation("RolePermission");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("CMS_Common.Tag", b =>
                {
                    b.Navigation("TagArticles");
                });
#pragma warning restore 612, 618
        }
    }
}
